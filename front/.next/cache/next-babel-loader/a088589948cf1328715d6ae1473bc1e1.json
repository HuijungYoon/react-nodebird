{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nimport shortid from \"shortid\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  addpostLoading: false,\n  addpostDone: false,\n  addpostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  removepostLoading: false,\n  removepostDone: false,\n  removepostError: null,\n  addCommenttLoading: false,\n  addCommenttDone: false,\n  addCommenttError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})); // initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummypost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n}); //이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addpostLoading = true;\n      draft.addpostDone = false;\n      draft.addpostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addpostLoading = false;\n      draft.mainPosts.unshift(action.data);\n      draft.addpostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addpostLoading = false;\n      draft.addpostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.loadPostsDone = true;\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removepostLoading = true;\n      draft.removepostDone = false;\n      draft.removepostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removepostDone = true;\n      draft.removepostLoading = false;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removepostLoading = false;\n      draft.removepostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      //   const postIndex = state.mainPosts.findIndex(\n      //     (v) => v.id === action.data.postId\n      //   );\n      //   const post = state.mainPosts[postIndex];\n      //   const Comments = [dummyComment(action.data.content), ...post.Comments];\n      //   const mainPosts = [...state.mainPosts];\n      //   mainPosts[postIndex] = { ...post, Comments };\n      //   return {\n      //     ...state,\n      //     mainPosts,\n      //     addCommentDone: true,\n      //     addCommentLoading: false,\n      //   };\n      // }\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentDone = true;\n      draft.addCommentLoading = false;\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/reducers/post.js"],"names":["shortId","produce","faker","shortid","initialState","mainPosts","imagePaths","hasMorePosts","addpostLoading","addpostDone","addpostError","loadPostsLoading","loadPostsDone","loadPostsError","removepostLoading","removepostDone","removepostError","addCommenttLoading","addCommenttDone","addCommenttError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummypost","dummyComment","reducer","state","action","draft","unshift","error","concat","length","filter","v","addCommentLoading","addCommentDone","addCommentError","post","find","PostId"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nimport shortid from \"shortid\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  addpostLoading: false,\n  addpostDone: false,\n  addpostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  removepostLoading: false,\n  removepostDone: false,\n  removepostError: null,\n  addCommenttLoading: false,\n  addCommenttDone: false,\n  addCommenttError: null,\n};\n\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [\n        {\n          src: faker.image.image(),\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            id: shortid.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummypost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n});\n\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addpostLoading = true;\n        draft.addpostDone = false;\n        draft.addpostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addpostLoading = false;\n        draft.mainPosts.unshift(action.data);\n        draft.addpostDone = true;\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addpostLoading = false;\n        draft.addpostError = action.error;\n        break;\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removepostLoading = true;\n        draft.removepostDone = false;\n        draft.removepostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removepostDone = true;\n        draft.removepostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removepostLoading = false;\n        draft.removepostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        //   const postIndex = state.mainPosts.findIndex(\n        //     (v) => v.id === action.data.postId\n        //   );\n        //   const post = state.mainPosts[postIndex];\n        //   const Comments = [dummyComment(action.data.content), ...post.Comments];\n        //   const mainPosts = [...state.mainPosts];\n        //   mainPosts[postIndex] = { ...post, Comments };\n        //   return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentDone: true,\n        //     addCommentLoading: false,\n        //   };\n        // }\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentDone = true;\n        draft.addCommentLoading = false;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}