{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\"; // import faker from \"faker\";\n// import shortid from \"shortid\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  addpostLoading: false,\n  addpostDone: false,\n  addpostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  removepostLoading: false,\n  removepostDone: false,\n  removepostError: null,\n  addCommenttLoading: false,\n  addCommenttDone: false,\n  addCommenttError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unLikePostLoading: false,\n  unLikePostDone: false,\n  unLikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; // export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortid.generate(),\n//       User: {\n//         id: shortid.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortid.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummypost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n}); //이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addpostLoading = true;\n      draft.addpostDone = false;\n      draft.addpostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addpostLoading = false;\n      draft.mainPosts.unshift(action.data);\n      draft.addpostDone = true;\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addpostLoading = false;\n      draft.addpostError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePosttLoading = false;\n        draft.likePosttDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePosttLoading = false;\n      draft.likePosttError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unLikePosttLoading = true;\n      draft.unLikePosttDone = false;\n      draft.unLikePosttError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unLikePosttLoading = false;\n        draft.unLikePosttDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unLikePosttLoading = false;\n      draft.unLikePosttError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.loadPostsDone = true;\n      draft.hasMorePosts = action.data.length === 10;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removepostLoading = true;\n      draft.removepostDone = false;\n      draft.removepostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removepostDone = true;\n      draft.removepostLoading = false;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removepostLoading = false;\n      draft.removepostError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.imagePaths = action.data;\n      draft.uploadImagesDone = true;\n      draft.uploadImagesLoading = false;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      draft.retweetDone = true;\n      draft.retweetLoading = false;\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      //   const postIndex = state.mainPosts.findIndex(\n      //     (v) => v.id === action.data.postId\n      //   );\n      //   const post = state.mainPosts[postIndex];\n      //   const Comments = [dummyComment(action.data.content), ...post.Comments];\n      //   const mainPosts = [...state.mainPosts];\n      //   mainPosts[postIndex] = { ...post, Comments };\n      //   return {\n      //     ...state,\n      //     mainPosts,\n      //     addCommentDone: true,\n      //     addCommentLoading: false,\n      //   };\n      // }\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentDone = true;\n      draft.addCommentLoading = false;\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","imagePaths","hasMorePosts","addpostLoading","addpostDone","addpostError","loadPostsLoading","loadPostsDone","loadPostsError","removepostLoading","removepostDone","removepostError","addCommenttLoading","addCommenttDone","addCommenttError","likePostLoading","likePostDone","likePostError","unLikePostLoading","unLikePostDone","unLikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","dummypost","id","content","User","nickname","Images","Comments","dummyComment","generate","reducer","state","action","draft","filter","v","i","unshift","error","post","find","PostId","Likers","push","UserId","likePosttLoading","likePosttDone","likePosttError","unLikePosttLoading","unLikePosttDone","unLikePosttError","concat","length","addCommentLoading","addCommentDone","addCommentError"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB,C,CACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE,EAFc;AAG1BC,EAAAA,YAAY,EAAE,IAHY;AAI1BC,EAAAA,cAAc,EAAE,KAJU;AAK1BC,EAAAA,WAAW,EAAE,KALa;AAM1BC,EAAAA,YAAY,EAAE,IANY;AAO1BC,EAAAA,gBAAgB,EAAE,KAPQ;AAQ1BC,EAAAA,aAAa,EAAE,KARW;AAS1BC,EAAAA,cAAc,EAAE,IATU;AAU1BC,EAAAA,iBAAiB,EAAE,KAVO;AAW1BC,EAAAA,cAAc,EAAE,KAXU;AAY1BC,EAAAA,eAAe,EAAE,IAZS;AAa1BC,EAAAA,kBAAkB,EAAE,KAbM;AAc1BC,EAAAA,eAAe,EAAE,KAdS;AAe1BC,EAAAA,gBAAgB,EAAE,IAfQ;AAiB1BC,EAAAA,eAAe,EAAE,KAjBS;AAkB1BC,EAAAA,YAAY,EAAE,KAlBY;AAmB1BC,EAAAA,aAAa,EAAE,IAnBW;AAqB1BC,EAAAA,iBAAiB,EAAE,KArBO;AAsB1BC,EAAAA,cAAc,EAAE,KAtBU;AAuB1BC,EAAAA,eAAe,EAAE,IAvBS;AAyB1BC,EAAAA,mBAAmB,EAAE,KAzBK;AA0B1BC,EAAAA,gBAAgB,EAAE,KA1BQ;AA2B1BC,EAAAA,iBAAiB,EAAE,IA3BO;AA6B1BC,EAAAA,cAAc,EAAE,KA7BU;AA8B1BC,EAAAA,WAAW,EAAE,KA9Ba;AA+B1BC,EAAAA,YAAY,EAAE;AA/BY,CAArB,C,CAkCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAEf,gBAD0B;AAEhCc,EAAAA;AAFgC,CAAX,CAAhB;AAIP,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAET,mBAD6B;AAEnCQ,EAAAA;AAFmC,CAAX,CAAnB;;AAKP,MAAMG,SAAS,GAAIH,IAAD,KAAW;AAC3BI,EAAAA,EAAE,EAAEJ,IAAI,CAACI,EADkB;AAE3BC,EAAAA,OAAO,EAAEL,IAAI,CAACK,OAFa;AAG3BC,EAAAA,IAAI,EAAE;AACJF,IAAAA,EAAE,EAAE,CADA;AAEJG,IAAAA,QAAQ,EAAE;AAFN,GAHqB;AAO3BC,EAAAA,MAAM,EAAE,EAPmB;AAQ3BC,EAAAA,QAAQ,EAAE;AARiB,CAAX,CAAlB;;AAWA,MAAMC,YAAY,GAAIV,IAAD,KAAW;AAC9BI,EAAAA,EAAE,EAAE5D,OAAO,CAACmE,QAAR,EAD0B;AAE9BN,EAAAA,OAAO,EAAEL,IAFqB;AAG9BM,EAAAA,IAAI,EAAE;AACJF,IAAAA,EAAE,EAAE,CADA;AAEJG,IAAAA,QAAQ,EAAE;AAFN;AAHwB,CAAX,CAArB,C,CASA;;;AACA,MAAMK,OAAO,GAAG,CAACC,KAAK,GAAGnE,YAAT,EAAuBoE,MAAvB,KACdrE,OAAO,CAACoE,KAAD,EAASE,KAAD,IAAW;AACxB,UAAQD,MAAM,CAACb,IAAf;AACE,SAAKH,YAAL;AACEiB,MAAAA,KAAK,CAACnE,UAAN,GAAmBmE,KAAK,CAACnE,UAAN,CAAiBoE,MAAjB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKJ,MAAM,CAACd,IAA/C,CAAnB;AACA;;AAEF,SAAKd,gBAAL;AACE6B,MAAAA,KAAK,CAACjE,cAAN,GAAuB,IAAvB;AACAiE,MAAAA,KAAK,CAAChE,WAAN,GAAoB,KAApB;AACAgE,MAAAA,KAAK,CAAC/D,YAAN,GAAqB,IAArB;AACA;;AACF,SAAKmC,gBAAL;AACE4B,MAAAA,KAAK,CAACjE,cAAN,GAAuB,KAAvB;AACAiE,MAAAA,KAAK,CAACpE,SAAN,CAAgBwE,OAAhB,CAAwBL,MAAM,CAACd,IAA/B;AACAe,MAAAA,KAAK,CAAChE,WAAN,GAAoB,IAApB;AACAgE,MAAAA,KAAK,CAACnE,UAAN,GAAmB,EAAnB;AACA;;AACF,SAAKwC,gBAAL;AACE2B,MAAAA,KAAK,CAACjE,cAAN,GAAuB,KAAvB;AACAiE,MAAAA,KAAK,CAAC/D,YAAN,GAAqB8D,MAAM,CAACM,KAA5B;AACA;;AAEF,SAAK9C,iBAAL;AACEyC,MAAAA,KAAK,CAACrD,eAAN,GAAwB,IAAxB;AACAqD,MAAAA,KAAK,CAACpD,YAAN,GAAqB,KAArB;AACAoD,MAAAA,KAAK,CAACnD,aAAN,GAAsB,IAAtB;AACA;;AACF,SAAKW,iBAAL;AAAwB;AACtB,cAAM8C,IAAI,GAAGN,KAAK,CAACpE,SAAN,CAAgB2E,IAAhB,CAAsBL,CAAD,IAAOA,CAAC,CAACb,EAAF,KAASU,MAAM,CAACd,IAAP,CAAYuB,MAAjD,CAAb;AACAF,QAAAA,IAAI,CAACG,MAAL,CAAYC,IAAZ,CAAiB;AAAErB,UAAAA,EAAE,EAAEU,MAAM,CAACd,IAAP,CAAY0B;AAAlB,SAAjB;AACAX,QAAAA,KAAK,CAACY,gBAAN,GAAyB,KAAzB;AACAZ,QAAAA,KAAK,CAACa,aAAN,GAAsB,IAAtB;AACA;AACD;;AACD,SAAKpD,iBAAL;AACEuC,MAAAA,KAAK,CAACY,gBAAN,GAAyB,KAAzB;AACAZ,MAAAA,KAAK,CAACc,cAAN,GAAuBf,MAAM,CAACM,KAA9B;AACA;;AAEF,SAAKxC,mBAAL;AACEmC,MAAAA,KAAK,CAACe,kBAAN,GAA2B,IAA3B;AACAf,MAAAA,KAAK,CAACgB,eAAN,GAAwB,KAAxB;AACAhB,MAAAA,KAAK,CAACiB,gBAAN,GAAyB,IAAzB;AACA;;AACF,SAAKnD,mBAAL;AAA0B;AACxB,cAAMwC,IAAI,GAAGN,KAAK,CAACpE,SAAN,CAAgB2E,IAAhB,CAAsBL,CAAD,IAAOA,CAAC,CAACb,EAAF,KAASU,MAAM,CAACd,IAAP,CAAYuB,MAAjD,CAAb;AACAF,QAAAA,IAAI,CAACG,MAAL,GAAcH,IAAI,CAACG,MAAL,CAAYR,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACb,EAAF,KAASU,MAAM,CAACd,IAAP,CAAY0B,MAA/C,CAAd;AACAX,QAAAA,KAAK,CAACe,kBAAN,GAA2B,KAA3B;AACAf,QAAAA,KAAK,CAACgB,eAAN,GAAwB,IAAxB;AACA;AACD;;AACD,SAAKjD,mBAAL;AACEiC,MAAAA,KAAK,CAACe,kBAAN,GAA2B,KAA3B;AACAf,MAAAA,KAAK,CAACiB,gBAAN,GAAyBlB,MAAM,CAACM,KAAhC;AACA;;AAEF,SAAKrC,kBAAL;AACEgC,MAAAA,KAAK,CAAC9D,gBAAN,GAAyB,IAAzB;AACA8D,MAAAA,KAAK,CAAC7D,aAAN,GAAsB,KAAtB;AACA6D,MAAAA,KAAK,CAAC5D,cAAN,GAAuB,IAAvB;AACA;;AAEF,SAAK6B,kBAAL;AACE+B,MAAAA,KAAK,CAAC9D,gBAAN,GAAyB,KAAzB;AACA8D,MAAAA,KAAK,CAACpE,SAAN,GAAkBmE,MAAM,CAACd,IAAP,CAAYiC,MAAZ,CAAmBlB,KAAK,CAACpE,SAAzB,CAAlB;AACAoE,MAAAA,KAAK,CAAC7D,aAAN,GAAsB,IAAtB;AACA6D,MAAAA,KAAK,CAAClE,YAAN,GAAqBiE,MAAM,CAACd,IAAP,CAAYkC,MAAZ,KAAuB,EAA5C;AACA;;AAEF,SAAKjD,kBAAL;AACE8B,MAAAA,KAAK,CAAC9D,gBAAN,GAAyB,KAAzB;AACA8D,MAAAA,KAAK,CAAC5D,cAAN,GAAuB2D,MAAM,CAACM,KAA9B;AACA;;AAEF,SAAK/B,mBAAL;AACE0B,MAAAA,KAAK,CAAC3D,iBAAN,GAA0B,IAA1B;AACA2D,MAAAA,KAAK,CAAC1D,cAAN,GAAuB,KAAvB;AACA0D,MAAAA,KAAK,CAACzD,eAAN,GAAwB,IAAxB;AACA;;AAEF,SAAKgC,mBAAL;AACEyB,MAAAA,KAAK,CAACpE,SAAN,GAAkBoE,KAAK,CAACpE,SAAN,CAAgBqE,MAAhB,CACfC,CAAD,IAAOA,CAAC,CAACb,EAAF,KAASU,MAAM,CAACd,IAAP,CAAYuB,MADZ,CAAlB;AAGAR,MAAAA,KAAK,CAAC1D,cAAN,GAAuB,IAAvB;AACA0D,MAAAA,KAAK,CAAC3D,iBAAN,GAA0B,KAA1B;AACA;;AAEF,SAAKmC,mBAAL;AACEwB,MAAAA,KAAK,CAAC3D,iBAAN,GAA0B,KAA1B;AACA2D,MAAAA,KAAK,CAACzD,eAAN,GAAwBwD,MAAM,CAACM,KAA/B;AACA;;AAEF,SAAKzB,qBAAL;AACEoB,MAAAA,KAAK,CAAC/C,mBAAN,GAA4B,IAA5B;AACA+C,MAAAA,KAAK,CAAC9C,gBAAN,GAAyB,KAAzB;AACA8C,MAAAA,KAAK,CAAC7C,iBAAN,GAA0B,IAA1B;AACA;;AAEF,SAAK0B,qBAAL;AACEmB,MAAAA,KAAK,CAACnE,UAAN,GAAmBkE,MAAM,CAACd,IAA1B;AACAe,MAAAA,KAAK,CAAC9C,gBAAN,GAAyB,IAAzB;AACA8C,MAAAA,KAAK,CAAC/C,mBAAN,GAA4B,KAA5B;AACA;;AAEF,SAAK6B,qBAAL;AACEkB,MAAAA,KAAK,CAAC/C,mBAAN,GAA4B,KAA5B;AACA+C,MAAAA,KAAK,CAAC7C,iBAAN,GAA0B4C,MAAM,CAACM,KAAjC;AACA;;AAEF,SAAK3C,eAAL;AACEsC,MAAAA,KAAK,CAAC5C,cAAN,GAAuB,IAAvB;AACA4C,MAAAA,KAAK,CAAC3C,WAAN,GAAoB,KAApB;AACA2C,MAAAA,KAAK,CAAC1C,YAAN,GAAqB,IAArB;AACA;;AAEF,SAAKK,eAAL;AACEqC,MAAAA,KAAK,CAAC3C,WAAN,GAAoB,IAApB;AACA2C,MAAAA,KAAK,CAAC5C,cAAN,GAAuB,KAAvB;AACA4C,MAAAA,KAAK,CAACpE,SAAN,CAAgBwE,OAAhB,CAAwBL,MAAM,CAACd,IAA/B;AACA;;AAEF,SAAKrB,eAAL;AACEoC,MAAAA,KAAK,CAAC5C,cAAN,GAAuB,KAAvB;AACA4C,MAAAA,KAAK,CAAC1C,YAAN,GAAqByC,MAAM,CAACM,KAA5B;AACA;;AAEF,SAAK5B,mBAAL;AACEuB,MAAAA,KAAK,CAACoB,iBAAN,GAA0B,IAA1B;AACApB,MAAAA,KAAK,CAACqB,cAAN,GAAuB,KAAvB;AACArB,MAAAA,KAAK,CAACsB,eAAN,GAAwB,IAAxB;AACA;;AAEF,SAAK5C,mBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAM4B,IAAI,GAAGN,KAAK,CAACpE,SAAN,CAAgB2E,IAAhB,CAAsBL,CAAD,IAAOA,CAAC,CAACb,EAAF,KAASU,MAAM,CAACd,IAAP,CAAYuB,MAAjD,CAAb;AAEAF,MAAAA,IAAI,CAACZ,QAAL,CAAcU,OAAd,CAAsBL,MAAM,CAACd,IAA7B;AACAe,MAAAA,KAAK,CAACqB,cAAN,GAAuB,IAAvB;AACArB,MAAAA,KAAK,CAACoB,iBAAN,GAA0B,KAA1B;AACA;;AACF,SAAKzC,mBAAL;AACEqB,MAAAA,KAAK,CAACoB,iBAAN,GAA0B,KAA1B;AACApB,MAAAA,KAAK,CAACsB,eAAN,GAAwBvB,MAAM,CAACM,KAA/B;AACA;;AAEF;AACE;AA/JJ;AAiKD,CAlKM,CADT;;AAqKA,eAAeR,OAAf","sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\n// import faker from \"faker\";\n// import shortid from \"shortid\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  addpostLoading: false,\n  addpostDone: false,\n  addpostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  removepostLoading: false,\n  removepostDone: false,\n  removepostError: null,\n  addCommenttLoading: false,\n  addCommenttDone: false,\n  addCommenttError: null,\n\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n\n  unLikePostLoading: false,\n  unLikePostDone: false,\n  unLikePostError: null,\n\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n};\n\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortid.generate(),\n//       User: {\n//         id: shortid.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortid.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\n\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummypost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n});\n\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addpostLoading = true;\n        draft.addpostDone = false;\n        draft.addpostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addpostLoading = false;\n        draft.mainPosts.unshift(action.data);\n        draft.addpostDone = true;\n        draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addpostLoading = false;\n        draft.addpostError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers.push({ id: action.data.UserId });\n        draft.likePosttLoading = false;\n        draft.likePosttDone = true;\n        break;\n      }\n      case LIKE_POST_FAILURE:\n        draft.likePosttLoading = false;\n        draft.likePosttError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unLikePosttLoading = true;\n        draft.unLikePosttDone = false;\n        draft.unLikePosttError = null;\n        break;\n      case UNLIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n        draft.unLikePosttLoading = false;\n        draft.unLikePosttDone = true;\n        break;\n      }\n      case UNLIKE_POST_FAILURE:\n        draft.unLikePosttLoading = false;\n        draft.unLikePosttError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsDone = true;\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removepostLoading = true;\n        draft.removepostDone = false;\n        draft.removepostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(\n          (v) => v.id !== action.data.PostId\n        );\n        draft.removepostDone = true;\n        draft.removepostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removepostLoading = false;\n        draft.removepostError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesDone = true;\n        draft.uploadImagesLoading = false;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        draft.retweetDone = true;\n        draft.retweetLoading = false;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        //   const postIndex = state.mainPosts.findIndex(\n        //     (v) => v.id === action.data.postId\n        //   );\n        //   const post = state.mainPosts[postIndex];\n        //   const Comments = [dummyComment(action.data.content), ...post.Comments];\n        //   const mainPosts = [...state.mainPosts];\n        //   mainPosts[postIndex] = { ...post, Comments };\n        //   return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentDone: true,\n        //     addCommentLoading: false,\n        //   };\n        // }\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n\n        post.Comments.unshift(action.data);\n        draft.addCommentDone = true;\n        draft.addCommentLoading = false;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}