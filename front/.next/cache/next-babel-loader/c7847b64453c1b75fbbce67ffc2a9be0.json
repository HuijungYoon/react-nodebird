{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addPost, ADD_POST_REQUEST } from \"../reducers/post\";\nimport { useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from \"../reducers/post\";\n\nconst PostForm = () => {\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const [text, onChangeText, setText] = useInput(\"\");\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert(\"게시글 작성하세요\");\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append(\"image\", p);\n    });\n    formData.append(\"content\", text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    console.log(`images`, e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  });\n  return __jsx(Form, {\n    style: {\n      margin: \"10px 0 20px\"\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: \"right\"\n    },\n    htmlType: \"submit\"\n  }, \"\\uCA31\\uCA31\")), __jsx(\"div\", null, imagePaths.map((v, i) => __jsx(\"div\", {\n    key: v,\n    style: {\n      display: \"inline-block\"\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3065/${v}`,\n    style: {\n      width: \"200px\"\n    },\n    alt: v\n  }), __jsx(\"div\", null, __jsx(Button, {\n    onClick: onRemoveImage(i)\n  }, \"\\uC81C\\uAC70\"))))));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/components/PostForm.js"],"names":["React","Form","Input","Button","useCallback","useSelector","useDispatch","addPost","ADD_POST_REQUEST","useRef","useEffect","useInput","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","imagePaths","addPostDone","state","post","text","onChangeText","setText","dispatch","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","data","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","onRemoveImage","index","margin","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addPost, ADD_POST_REQUEST } from \"../reducers/post\";\nimport { useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from \"../reducers/post\";\nconst PostForm = () => {\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\n  const [text, onChangeText, setText] = useInput(\"\");\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert(\"게시글 작성하세요\");\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach((p) => {\n      formData.append(\"image\", p);\n    });\n    formData.append(\"content\", text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData,\n    });\n  }, [text, imagePaths]);\n  const imageInput = useRef();\n\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n\n  const onChangeImages = useCallback((e) => {\n    console.log(`images`, e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, (f) => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData,\n    });\n  }, []);\n\n  const onRemoveImage = useCallback((index) => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index,\n    });\n  });\n  return (\n    <Form\n      style={{ margin: \"10px 0 20px\" }}\n      encType=\"multipart/form-data\"\n      onFinish={onSubmit}\n    >\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"어떤 신기한 일이 있었나요?\"\n      />\n      <div>\n        <input\n          type=\"file\"\n          name=\"image\"\n          multiple\n          hidden\n          ref={imageInput}\n          onChange={onChangeImages}\n        />\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n        <Button type=\"primary\" style={{ float: \"right\" }} htmlType=\"submit\">\n          쨱쨱\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map((v, i) => (\n          <div key={v} style={{ display: \"inline-block\" }}>\n            <img\n              src={`http://localhost:3065/${v}`}\n              style={{ width: \"200px\" }}\n              alt={v}\n            />\n            <div>\n              <Button onClick={onRemoveImage(i)}>제거</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Form>\n  );\n};\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}