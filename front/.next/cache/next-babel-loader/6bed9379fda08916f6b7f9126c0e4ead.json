{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\"; // import faker from \"faker\";\n// import shortid from \"shortid\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  addpostLoading: false,\n  addpostDone: false,\n  addpostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  removepostLoading: false,\n  removepostDone: false,\n  removepostError: null,\n  addCommenttLoading: false,\n  addCommenttDone: false,\n  addCommenttError: null\n}; // export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortid.generate(),\n//       User: {\n//         id: shortid.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortid.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummypost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n}); //이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addpostLoading = true;\n      draft.addpostDone = false;\n      draft.addpostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addpostLoading = false;\n      draft.mainPosts.unshift(action.data);\n      draft.addpostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addpostLoading = false;\n      draft.addpostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.loadPostsDone = true;\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removepostLoading = true;\n      draft.removepostDone = false;\n      draft.removepostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removepostDone = true;\n      draft.removepostLoading = false;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removepostLoading = false;\n      draft.removepostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      //   const postIndex = state.mainPosts.findIndex(\n      //     (v) => v.id === action.data.postId\n      //   );\n      //   const post = state.mainPosts[postIndex];\n      //   const Comments = [dummyComment(action.data.content), ...post.Comments];\n      //   const mainPosts = [...state.mainPosts];\n      //   mainPosts[postIndex] = { ...post, Comments };\n      //   return {\n      //     ...state,\n      //     mainPosts,\n      //     addCommentDone: true,\n      //     addCommentLoading: false,\n      //   };\n      // }\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentDone = true;\n      draft.addCommentLoading = false;\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","imagePaths","hasMorePosts","addpostLoading","addpostDone","addpostError","loadPostsLoading","loadPostsDone","loadPostsError","removepostLoading","removepostDone","removepostError","addCommenttLoading","addCommenttDone","addCommenttError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummypost","id","content","User","nickname","Images","Comments","dummyComment","generate","reducer","state","action","draft","unshift","error","concat","length","filter","v","addCommentLoading","addCommentDone","addCommentError","post","find","PostId"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\n// import faker from \"faker\";\n// import shortid from \"shortid\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  addpostLoading: false,\n  addpostDone: false,\n  addpostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  removepostLoading: false,\n  removepostDone: false,\n  removepostError: null,\n  addCommenttLoading: false,\n  addCommenttDone: false,\n  addCommenttError: null,\n};\n\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortid.generate(),\n//       User: {\n//         id: shortid.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortid.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummypost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n});\n\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addpostLoading = true;\n        draft.addpostDone = false;\n        draft.addpostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addpostLoading = false;\n        draft.mainPosts.unshift(action.data);\n        draft.addpostDone = true;\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addpostLoading = false;\n        draft.addpostError = action.error;\n        break;\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removepostLoading = true;\n        draft.removepostDone = false;\n        draft.removepostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removepostDone = true;\n        draft.removepostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removepostLoading = false;\n        draft.removepostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        //   const postIndex = state.mainPosts.findIndex(\n        //     (v) => v.id === action.data.postId\n        //   );\n        //   const post = state.mainPosts[postIndex];\n        //   const Comments = [dummyComment(action.data.content), ...post.Comments];\n        //   const mainPosts = [...state.mainPosts];\n        //   mainPosts[postIndex] = { ...post, Comments };\n        //   return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentDone: true,\n        //     addCommentLoading: false,\n        //   };\n        // }\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n\n        post.Comments.unshift(action.data);\n        draft.addCommentDone = true;\n        draft.addCommentLoading = false;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}