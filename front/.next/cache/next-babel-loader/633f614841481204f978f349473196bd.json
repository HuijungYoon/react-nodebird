{"ast":null,"code":"import { all, fork, put, call, take, takeEvery, throttle, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction loginAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\" //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logout() {\n  try {\n    // const result = yield call(logoutAPI);\n    delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\" //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post(\"/api/addpost\");\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\" //   data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(\"LOG_IN_REQUEST\", login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logout);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n} //fork call의 차이점은 알아야한다.\n//call fork의 차이는 동기와 비동기이다.\n\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/sagas/index.js"],"names":["all","fork","put","call","take","takeEvery","throttle","delay","takeLatest","axios","loginAPI","data","post","login","action","type","err","response","logoutAPI","logout","addPostAPI","addPost","watchLogin","watchLogout","watchAddPost","rootSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,GAHF,EAIEC,IAJF,EAKEC,IALF,EAMEC,SANF,EAOEC,QAPF,EAQEC,KARF,EASEC,UATF,QAUO,oBAVP;AAWA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACA,UAAML,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAE,gBADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,UAAMd,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAE,gBADE;AAERJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASO,SAAT,GAAqB;AACnB,SAAOT,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUO,MAAV,GAAmB;AACjB,MAAI;AACF;AACAZ,IAAAA,KAAK,CAAC,IAAD,CAAL;AACA,UAAML,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAE,iBADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,UAAMd,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAE,iBADE;AAERJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASS,UAAT,GAAsB;AACpB,SAAOX,KAAK,CAACG,IAAN,CAAW,cAAX,CAAP;AACD;;AAED,UAAUS,OAAV,CAAkBP,MAAlB,EAA0B;AACxB,MAAI;AACF;AACAP,IAAAA,KAAK,CAAC,IAAD,CAAL;AACA,UAAML,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAE,kBADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,UAAMd,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAE,kBADE;AAERJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUW,UAAV,GAAuB;AACrB,QAAMd,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB;AACD;;AACD,UAAUU,WAAV,GAAwB;AACtB,QAAMf,UAAU,CAAC,iBAAD,EAAoBW,MAApB,CAAhB;AACD;;AACD,UAAUK,YAAV,GAAyB;AACvB,QAAMhB,UAAU,CAAC,kBAAD,EAAqBa,OAArB,CAAhB;AACD,C,CAED;AACA;;;AACA,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMzB,GAAG,CAAC,CAACC,IAAI,CAACqB,UAAD,CAAL,EAAmBrB,IAAI,CAACsB,WAAD,CAAvB,EAAsCtB,IAAI,CAACuB,YAAD,CAA1C,CAAD,CAAT;AACD","sourcesContent":["import {\n  all,\n  fork,\n  put,\n  call,\n  take,\n  takeEvery,\n  throttle,\n  delay,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction loginAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logout() {\n  try {\n    // const result = yield call(logoutAPI);\n    delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post(\"/api/addpost\");\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(\"LOG_IN_REQUEST\", login);\n}\nfunction* watchLogout() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logout);\n}\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n}\n\n//fork call의 차이점은 알아야한다.\n//call fork의 차이는 동기와 비동기이다.\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n}\n"]},"metadata":{},"sourceType":"module"}