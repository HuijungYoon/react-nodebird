{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, put, call, take, takeEvery, throttle, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction loginAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: \"LOG_IN_SUCCESS\" //   data: result.data,\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: \"LOG_IN_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          // const result = yield call(logoutAPI);\n          delay(1000);\n          _context2.next = 4;\n          return put({\n            type: \"LOG_OUT_SUCCESS\" //   data: result.data,\n\n          });\n\n        case 4:\n          _context2.next = 10;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 10;\n          return put({\n            type: \"LOG_OUT_FAILURE\",\n            data: _context2.t0.response.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 6]]);\n}\n\nfunction addPostAPI() {\n  return axios.post(\"/api/addpost\");\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          // const result = yield call(addPostAPI);\n          delay(1000);\n          _context3.next = 4;\n          return put({\n            type: \"ADD_POST_SUCCESS\" //   data: result.data,\n\n          });\n\n        case 4:\n          _context3.next = 10;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 10;\n          return put({\n            type: \"ADD_POST_FAILURE\",\n            data: _context3.t0.response.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 6]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(\"LOG_IN_REQUEST\", login);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(\"LOG_OUT_REQUEST\", logout);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(\"ADD_POST_REQUEST\", addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //fork call의 차이점은 알아야한다.\n//call fork의 차이는 동기와 비동기이다.\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/sagas/index.js"],"names":["login","logout","addPost","watchLogin","watchLogout","watchAddPost","rootSaga","all","fork","put","call","take","takeEvery","throttle","delay","takeLatest","axios","loginAPI","data","post","action","type","response","logoutAPI","addPostAPI"],"mappings":"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","sourcesContent":["import {\n  all,\n  fork,\n  put,\n  call,\n  take,\n  takeEvery,\n  throttle,\n  delay,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction loginAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logout() {\n  try {\n    // const result = yield call(logoutAPI);\n    delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post(\"/api/addpost\");\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      //   data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(\"LOG_IN_REQUEST\", login);\n}\nfunction* watchLogout() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logout);\n}\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n}\n\n//fork call의 차이점은 알아야한다.\n//call fork의 차이는 동기와 비동기이다.\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n}\n"]},"metadata":{},"sourceType":"module"}