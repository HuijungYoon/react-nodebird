{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/huijungyoon/ReactFolder/NodeBirdJS/front/components/PostCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Card, Popover, Avatar, Button, List, Comment } from \"antd\";\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from \"@ant-design/icons\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostImages from \"./PostImages\";\nimport { useState } from \"react\";\nimport { useCallback } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nimport { useEffect } from \"react\";\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      removepostLoading = _useSelector2.removepostLoading,\n      retweetError = _useSelector2.retweetError;\n\n  var dispatch = useDispatch();\n  var id = me === null || me === void 0 ? void 0 : me.id;\n  var liked = post.Likers.find(function (v) {\n    return v.id === id;\n  });\n\n  var _useState = useState(false),\n      commentFormOpend = _useState[0],\n      setCommentFormOpend = _useState[1]; // useEffect(() => {\n  //   if (retweetError) {\n  //     alert(retweetError);\n  //   }\n  // }, [retweetError]);\n\n\n  var onLike = useCallback(function () {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onUnLike = useCallback(function () {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpend(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onRemovePost = useCallback(function () {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removepostLoading,\n        onClick: onRemovePost,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 19\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 22\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 19\n      }\n    }, post.User.nickname[0]),\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 24\n      }\n    }),\n    title: post.User.nickname,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  })), commentFormOpend && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 27\n          }\n        }, item.User.nickname[0]),\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  })));\n};\n\n_s(PostCard, \"n0DlN1zvk0vtVAGty6NT/zcWIS0=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/components/PostCard.js"],"names":["React","Card","Popover","Avatar","Button","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","PropTypes","useSelector","useDispatch","PostImages","useState","useCallback","CommentForm","PostCardContent","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","useEffect","PostCard","post","state","user","me","removepostLoading","retweetError","dispatch","id","liked","Likers","find","v","commentFormOpend","setCommentFormOpend","onLike","alert","type","data","onUnLike","onToggleComment","prev","onRemovePost","onRetweet","marginBottom","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Card, Popover, Avatar, Button, List, Comment } from \"antd\";\nimport {\n  RetweetOutlined,\n  HeartOutlined,\n  MessageOutlined,\n  EllipsisOutlined,\n  HeartTwoTone,\n} from \"@ant-design/icons\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostImages from \"./PostImages\";\nimport { useState } from \"react\";\nimport { useCallback } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport {\n  REMOVE_POST_REQUEST,\n  LIKE_POST_REQUEST,\n  UNLIKE_POST_REQUEST,\n  RETWEET_REQUEST,\n} from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nimport { useEffect } from \"react\";\nconst PostCard = ({ post }) => {\n  const { me } = useSelector((state) => state.user);\n  const { removepostLoading, retweetError } = useSelector(\n    (state) => state.post\n  );\n  const dispatch = useDispatch();\n  const id = me?.id;\n  const liked = post.Likers.find((v) => v.id === id);\n\n  const [commentFormOpend, setCommentFormOpend] = useState(false);\n\n  // useEffect(() => {\n  //   if (retweetError) {\n  //     alert(retweetError);\n  //   }\n  // }, [retweetError]);\n\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n\n  const onUnLike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpend((prev) => !prev);\n  }, []);\n\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    });\n  }, [id]);\n\n  return (\n    <div style={{ marginBottom: 20 }}>\n      <Card\n        cover={post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n          liked ? (\n            <HeartTwoTone\n              twoToneColor=\"#eb2f96\"\n              key=\"heart\"\n              onClick={onUnLike}\n            />\n          ) : (\n            <HeartOutlined key=\"heart\" onClick={onLike} />\n          ),\n\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n          <Popover\n            key=\"more\"\n            content={\n              <Button.Group>\n                {id && post.User.id === id ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button\n                      type=\"danger\"\n                      loading={removepostLoading}\n                      onClick={onRemovePost}\n                    >\n                      삭제\n                    </Button>\n                  </>\n                ) : (\n                  <Button>신고</Button>\n                )}\n              </Button.Group>\n            }\n          >\n            <EllipsisOutlined />\n          </Popover>,\n        ]}\n        extra={id && <FollowButton post={post} />}\n      >\n        <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          description={<PostCardContent postData={post.content} />}\n          title={post.User.nickname}\n        />\n      </Card>\n      {commentFormOpend && (\n        <div>\n          <CommentForm post={post} />\n          <List\n            header={`${post.Comments.length}개의 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments}\n            renderItem={(item) => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </div>\n      )}\n      {/* <CommentForm />\n      <Comments /> */}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}