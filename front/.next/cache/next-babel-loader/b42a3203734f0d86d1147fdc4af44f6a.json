{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, put, delay, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data, {\n      withCredentials: true\n    });\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/psot/${data.postId}/comment`, data, {\n    withCredentials: true\n  }); // POST/ post/1/coment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.ge(`/atpi/posts/`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addCommentAPI);\n    delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/sagas/post.js"],"names":["axios","all","fork","put","delay","takeLatest","throttle","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","addPostAPI","data","post","content","addPost","action","result","withCredentials","id","generate","type","err","response","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","loadPostsAPI","ge","loadPosts","LOAD_POSTS_FAILURE","watchAddPost","watchRemovePost","watchAddComment","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  all,\n  fork,\n  put,\n  delay,\n  takeLatest,\n  throttle,\n  call,\n} from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_SUCCESS,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  generateDummyPost,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", { content: data });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data, {\n      withCredentials: true,\n    });\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data, {\n    withCredentials: true,\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/psot/${data.postId}/comment`, data, {\n    withCredentials: true,\n  }); // POST/ post/1/coment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction loadPostsAPI() {\n  return axios.ge(`/atpi/posts/`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addCommentAPI);\n    delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}