{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nimport shortid from \"shortid\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫번째 게시글 #헤시태그 #익스프레스\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://cdn.pixabay.com/photo/2020/05/11/20/27/monkey-5160145_960_720.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://cdn.pixabay.com/photo/2020/07/21/00/46/skateboarder-5424692_960_720.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://cdn.pixabay.com/photo/2020/07/17/06/41/puppy-5413165_960_720.jpg\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hello\"\n      },\n      content: \"데미갓!\"\n    }]\n  }],\n  imagePaths: [],\n  addpostLoading: false,\n  addpostDone: false,\n  addpostError: null,\n  removepostLoading: false,\n  removepostDone: false,\n  removepostError: null,\n  addCommenttLoading: false,\n  addCommenttDone: false,\n  addCommenttError: null\n};\ninitialState.Array(20).fill().map(() => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummypost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n}); //이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addpostLoading = true;\n      draft.addpostDone = false;\n      draft.addpostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addpostLoading = false;\n      draft.mainPosts.unshift(dummypost(action.data));\n      draft.addpostDone = true;\n      draft.addpostError = null;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addpostLoading = false;\n      draft.addpostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removepostLoading = true;\n      draft.removepostDone = false;\n      draft.removepostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removepostDone = true;\n      draft.removepostLoading = false;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removepostLoading = false;\n      draft.removepostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      //   const postIndex = state.mainPosts.findIndex(\n      //     (v) => v.id === action.data.postId\n      //   );\n      //   const post = state.mainPosts[postIndex];\n      //   const Comments = [dummyComment(action.data.content), ...post.Comments];\n      //   const mainPosts = [...state.mainPosts];\n      //   mainPosts[postIndex] = { ...post, Comments };\n      //   return {\n      //     ...state,\n      //     mainPosts,\n      //     addCommentDone: true,\n      //     addCommentLoading: false,\n      //   };\n      // }\n      const post = draft.mainPosts.find(v => v.id === action.data.postId);\n      post.Comments.unshift(dummyComment(action.data.content));\n      draft.addCommentDone = true;\n      draft.addCommentLoading = false;\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/reducers/post.js"],"names":["shortId","produce","faker","shortid","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addpostLoading","addpostDone","addpostError","removepostLoading","removepostDone","removepostError","addCommenttLoading","addCommenttDone","addCommenttError","Array","fill","map","name","findName","lorem","paragraph","image","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummypost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","addCommentLoading","addCommentDone","addCommentError","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nimport shortid from \"shortid\";\n\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"제로초\",\n      },\n      content: \"첫번째 게시글 #헤시태그 #익스프레스\",\n      Images: [\n        {\n          id: shortId.generate(),\n          src:\n            \"https://cdn.pixabay.com/photo/2020/05/11/20/27/monkey-5160145_960_720.jpg\",\n        },\n        {\n          id: shortId.generate(),\n          src:\n            \"https://cdn.pixabay.com/photo/2020/07/21/00/46/skateboarder-5424692_960_720.jpg\",\n        },\n        {\n          id: shortId.generate(),\n          src:\n            \"https://cdn.pixabay.com/photo/2020/07/17/06/41/puppy-5413165_960_720.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: \"nero\",\n          },\n          content: \"우와 개정판\",\n        },\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: \"hello\",\n          },\n          content: \"데미갓!\",\n        },\n      ],\n    },\n  ],\n  imagePaths: [],\n  addpostLoading: false,\n  addpostDone: false,\n  addpostError: null,\n  removepostLoading: false,\n  removepostDone: false,\n  removepostError: null,\n  addCommenttLoading: false,\n  addCommenttDone: false,\n  addCommenttError: null,\n};\ninitialState\n  .Array(20)\n  .fill()\n  .map(() => ({\n    id: shortid.generate(),\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName(),\n    },\n    content: faker.lorem.paragraph(),\n    Images: [\n      {\n        src: faker.image.image(),\n      },\n    ],\n    Comments: [\n      {\n        User: {\n          id: shortid.generate(),\n          nickname: faker.name.findName(),\n        },\n        content: faker.lorem.sentence(),\n      },\n    ],\n  }));\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummypost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n});\n\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addpostLoading = true;\n        draft.addpostDone = false;\n        draft.addpostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addpostLoading = false;\n        draft.mainPosts.unshift(dummypost(action.data));\n        draft.addpostDone = true;\n        draft.addpostError = null;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addpostLoading = false;\n        draft.addpostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removepostLoading = true;\n        draft.removepostDone = false;\n        draft.removepostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removepostDone = true;\n        draft.removepostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removepostLoading = false;\n        draft.removepostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        //   const postIndex = state.mainPosts.findIndex(\n        //     (v) => v.id === action.data.postId\n        //   );\n        //   const post = state.mainPosts[postIndex];\n        //   const Comments = [dummyComment(action.data.content), ...post.Comments];\n        //   const mainPosts = [...state.mainPosts];\n        //   mainPosts[postIndex] = { ...post, Comments };\n        //   return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentDone: true,\n        //     addCommentLoading: false,\n        //   };\n        // }\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentDone = true;\n        draft.addCommentLoading = false;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}