{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport Head from \"next/head\";\nimport { useCallback, useState } from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport styled from \"styled-components\";\nimport { Checkbox, Form, Input, Button } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SIGN_UP_REQUEST, LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\nimport wrapper from \"../store/configureStore\";\nimport { END } from \"redux-saga\";\nconst ErrorMsg = styled.div`\n  color: red;\n`;\n\nconst Signup = () => {\n  const [email, onChangeEmail] = useInput(\"\");\n  const [nickname, onchaneNickname] = useInput(\"\");\n  const [password, onChangePassword] = useInput(\"\");\n  const {\n    0: passwordCheck,\n    1: setPasswordCheck\n  } = useState(\"\");\n  const {\n    0: passwordError,\n    1: setPasswordError\n  } = useState(false);\n  const {\n    signUpLoading,\n    signUpDone,\n    signUpError,\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const onChangePasswordCheck = useCallback(e => {\n    setPasswordCheck(e.target.value);\n    setPasswordError(e.target.value !== password);\n  }, [password]);\n  const {\n    0: term,\n    1: setTerm\n  } = useState(\"\");\n  const {\n    0: termError,\n    1: setTermError\n  } = useState(false);\n  const onChangeTerm = useCallback(e => {\n    setTerm(e.target.checked);\n    setTermError(false);\n  }, []);\n  useEffect(() => {\n    if (me && me.id) {\n      Router.replace(\"/\");\n    }\n  }, [me && me.id]);\n  useEffect(() => {\n    if (signUpDone) {\n      Router.replace(\"/\");\n    }\n  }, [signUpDone]);\n  useEffect(() => {\n    if (signUpError) {\n      alert(\"이미사용중인아이디입니다\");\n    }\n  }, [signUpError]);\n  const onSubmit = useCallback(() => {\n    if (password !== passwordCheck) {\n      return setPasswordError(true);\n    }\n\n    if (!term) {\n      return setTermError(true);\n    }\n\n    console.log(email, password, nickname);\n    dispatch({\n      type: SIGN_UP_REQUEST,\n      data: {\n        email,\n        password,\n        nickname\n      }\n    });\n  }, [email, password, passwordCheck, term]);\n  return __jsx(AppLayout, null, __jsx(Head, null, __jsx(\"title\", null, \"\\uD68C\\uC6D0\\uAC00\\uC785 | NodeBird\")), __jsx(Form, {\n    onFinish: onSubmit\n  }, __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-email\"\n  }, \"\\uC774\\uBA54\\uC77C\"), __jsx(\"br\", null), __jsx(Input, {\n    name: \"user-email\",\n    value: email,\n    type: \"email\",\n    required: true,\n    onChange: onChangeEmail\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-nick\"\n  }, \"\\uB2C9\\uB124\\uC784\"), __jsx(\"br\", null), __jsx(Input, {\n    name: \"user-nick\",\n    value: nickname,\n    required: true,\n    onChange: onchaneNickname\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-password\"\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638\"), __jsx(\"br\", null), __jsx(Input, {\n    name: \"user-password\",\n    value: password,\n    required: true,\n    type: \"password\",\n    onChange: onChangePassword\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-password-check\"\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638\\uCCB4\\uD06C\"), __jsx(\"br\", null), __jsx(Input, {\n    name: \"user-password-check\",\n    value: passwordCheck,\n    required: true,\n    type: \"password\",\n    onChange: onChangePasswordCheck\n  }), passwordError && __jsx(ErrorMsg, null, \"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4\")), __jsx(\"div\", null, __jsx(Checkbox, {\n    name: \"user-term\",\n    checked: term,\n    onChange: onChangeTerm\n  }, \"\\uBAA8\\uB4E0 \\uAC83\\uC5D0 \\uB3D9\\uC758\\uD569\\uB2C8\\uB2E4.\"), termError && __jsx(ErrorMsg, null, \"\\uC57D\\uAD00\\uC5D0 \\uB3D9\\uC758\\uD558\\uC154\\uC57C\\uD569\\uB2C8\\uB2E4.\")), __jsx(\"div\", {\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: signUpLoading\n  }, \"\\uAC00\\uC785\\uD558\\uAE30\"))));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(context);\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n\n  try {\n    await context.store.sagaTask.toPromise();\n  } catch (error) {\n    console.error(error);\n  }\n});\nexport default Signup;","map":null,"metadata":{},"sourceType":"module"}