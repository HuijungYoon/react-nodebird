{"ast":null,"code":"var _jsxFileName = \"/Users/huijungyoon/ReactFolder/NodeBirdJS/front/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Card, Popover, Avatar, Button, List, Comment } from \"antd\";\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from \"@ant-design/icons\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostImages from \"./PostImages\";\nimport { useState } from \"react\";\nimport { useCallback } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nmoment.locale(\"ko\");\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removepostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpend,\n    1: setCommentFormOpend\n  } = useState(false);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // console.log(post.Likers.find((v) => v.id === id));\n\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnLike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpend(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]); // const liked = post.Likers.find((v) => v.id === id);\n\n  const liked = post.Likers.find(v => v.id === id);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removepostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 19\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다` : null,\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    style: {\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, moment(post.createdAt).format(\"YYYY.MM.DD\")), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.Retweet.User.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 19\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, post.Retweet.User.nickname[0]))),\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 28\n      }\n    }),\n    title: post.Retweet.User.nickname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, moment(post.createdAt).format(\"YYYY.MM.DD\")), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.User.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 19\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }, post.User.nickname[0]))),\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 28\n      }\n    }),\n    title: post.User.nickname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }))), commentFormOpend && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: `/user/${item.User.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 23\n        }\n      }, __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }\n      }, item.User.nickname[0]))),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/components/PostCard.js"],"names":["React","Card","Popover","Avatar","Button","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","PropTypes","useSelector","useDispatch","PostImages","useState","useCallback","CommentForm","PostCardContent","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","Link","moment","locale","PostCard","post","dispatch","removepostLoading","state","commentFormOpend","setCommentFormOpend","id","user","me","onLike","alert","type","data","onUnLike","onToggleComment","prev","onRemovePost","onRetweet","liked","Likers","find","v","marginBottom","Images","User","RetweetId","nickname","Retweet","float","createdAt","format","content","Comments","length","item","propTypes","shape","number","object","string","arrayOf","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Card, Popover, Avatar, Button, List, Comment } from \"antd\";\nimport {\n  RetweetOutlined,\n  HeartOutlined,\n  MessageOutlined,\n  EllipsisOutlined,\n  HeartTwoTone,\n} from \"@ant-design/icons\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostImages from \"./PostImages\";\nimport { useState } from \"react\";\nimport { useCallback } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport {\n  REMOVE_POST_REQUEST,\n  LIKE_POST_REQUEST,\n  UNLIKE_POST_REQUEST,\n  RETWEET_REQUEST,\n} from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\n\nmoment.locale(\"ko\");\n\nconst PostCard = ({ post }) => {\n  const dispatch = useDispatch();\n  const { removepostLoading } = useSelector((state) => state.post);\n  const [commentFormOpend, setCommentFormOpend] = useState(false);\n  const id = useSelector((state) => state.user.me?.id);\n\n  // console.log(post.Likers.find((v) => v.id === id));\n\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id,\n    });\n  }, [id]);\n\n  const onUnLike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id,\n    });\n  }, [id]);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpend((prev) => !prev);\n  }, []);\n\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id,\n    });\n  }, [id]);\n\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이필요합니다.\");\n    }\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    });\n  }, [id]);\n\n  // const liked = post.Likers.find((v) => v.id === id);\n\n  const liked = post.Likers.find((v) => v.id === id);\n\n  return (\n    <div style={{ marginBottom: 20 }}>\n      <Card\n        cover={post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n          liked ? (\n            <HeartTwoTone\n              twoToneColor=\"#eb2f96\"\n              key=\"heart\"\n              onClick={onUnLike}\n            />\n          ) : (\n            <HeartOutlined key=\"heart\" onClick={onLike} />\n          ),\n\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n          <Popover\n            key=\"more\"\n            content={\n              <Button.Group>\n                {id && post.User.id === id ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button\n                      type=\"danger\"\n                      loading={removepostLoading}\n                      onClick={onRemovePost}\n                    >\n                      삭제\n                    </Button>\n                  </>\n                ) : (\n                  <Button>신고</Button>\n                )}\n              </Button.Group>\n            }\n          >\n            <EllipsisOutlined />\n          </Popover>,\n        ]}\n        title={\n          post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다` : null\n        }\n        extra={id && <FollowButton post={post} />}\n      >\n        {post.RetweetId && post.Retweet ? (\n          <Card\n            cover={\n              post.Retweet.Images[0] && (\n                <PostImages images={post.Retweet.Images} />\n              )\n            }\n          >\n            <div style={{ float: \"right\" }}>\n              {moment(post.createdAt).format(\"YYYY.MM.DD\")}\n            </div>\n            <Card.Meta\n              avatar={\n                <Link href={`/user/${post.Retweet.User.id}`}>\n                  <a>\n                    <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\n                  </a>\n                </Link>\n              }\n              description={<PostCardContent postData={post.Retweet.content} />}\n              title={post.Retweet.User.nickname}\n            />\n          </Card>\n        ) : (\n          <>\n            <div style={{ float: \"right\" }}>\n              {moment(post.createdAt).format(\"YYYY.MM.DD\")}\n            </div>\n            <Card.Meta\n              avatar={\n                <Link href={`/user/${post.User.id}`}>\n                  <a>\n                    <Avatar>{post.User.nickname[0]}</Avatar>\n                  </a>\n                </Link>\n              }\n              description={<PostCardContent postData={post.content} />}\n              title={post.User.nickname}\n            />\n          </>\n        )}\n      </Card>\n      {commentFormOpend && (\n        <div>\n          <CommentForm post={post} />\n          <List\n            header={`${post.Comments.length}개의 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments}\n            renderItem={(item) => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={\n                    <Link href={`/user/${item.User.id}`}>\n                      <a>\n                        <Avatar>{item.User.nickname[0]}</Avatar>\n                      </a>\n                    </Link>\n                  }\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </div>\n      )}\n      {/* <CommentForm />\n      <Comments /> */}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    Retweet: PropTypes.objectOf(PropTypes.any),\n  }).isRequired,\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}