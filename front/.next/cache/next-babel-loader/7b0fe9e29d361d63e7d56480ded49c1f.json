{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from \"axios\";\nimport { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortid.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/api/post\", data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction addCommentAPI() {\n  return axios.post(\"/api/psot/\".concat(data.postId, \"/comment\"));\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          // const result = yield call(addCommentAPI);\n          delay(1000);\n          _context3.next = 4;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 4:\n          _context3.next = 10;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 10;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 6]]);\n}\n\nfunction loadPostsAPI() {\n  return axios.ge(\"/atpi/posts/\");\n}\n\nfunction loadPosts(action) {\n  return _regeneratorRuntime.wrap(function loadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          // const result = yield call(addCommentAPI);\n          delay(1000);\n          _context4.next = 4;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10)\n          });\n\n        case 4:\n          _context4.next = 10;\n          break;\n\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 10;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 6]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/sagas/post.js"],"names":["addPost","removePost","addComment","loadPosts","watchAddPost","watchRemovePost","watchAddComment","watchLoadPosts","postSaga","axios","all","fork","put","delay","takeLatest","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","addPostAPI","data","post","action","id","generate","type","content","response","removePostAPI","addCommentAPI","postId","loadPostsAPI","ge","LOAD_POSTS_FAILURE"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_SUCCESS,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  generateDummyPost,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI() {\n  return axios.post(`/api/psot/${data.postId}/comment`);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI);\n    delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction loadPostsAPI() {\n  return axios.ge(`/atpi/posts/`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addCommentAPI);\n\n    delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}