{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\"; // import faker from \"faker\";\n// import shortid from \"shortid\";\n\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  addpostLoading: false,\n  addpostDone: false,\n  addpostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  removepostLoading: false,\n  removepostDone: false,\n  removepostError: null,\n  addCommenttLoading: false,\n  addCommenttDone: false,\n  addCommenttError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unLikePostLoading: false,\n  unLikePostDone: false,\n  unLikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  singlePost: null\n}; // export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortid.generate(),\n//       User: {\n//         id: shortid.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortid.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport var LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport var LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport var LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport var RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport var RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport var RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport var UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport var UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport var UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport var LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport var LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport var LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport var LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport var LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport var LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport var UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport var UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport var REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummypost = function dummypost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    }\n  };\n}; //이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addpostLoading = true;\n        draft.addpostDone = false;\n        draft.addpostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addpostLoading = false;\n        draft.mainPosts.unshift(action.data);\n        draft.addpostDone = true;\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addpostLoading = false;\n        draft.addpostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.singlePost = action.data;\n        draft.loadPostDone = true;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers.push({\n            id: action.data.UserId\n          });\n\n          draft.likePosttLoading = false;\n          draft.likePosttDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePosttLoading = false;\n        draft.likePosttError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unLikePosttLoading = true;\n        draft.unLikePosttDone = false;\n        draft.unLikePosttError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Likers = _post2.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unLikePosttLoading = false;\n          draft.unLikePosttDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unLikePosttLoading = false;\n        draft.unLikePosttError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removepostLoading = true;\n        draft.removepostDone = false;\n        draft.removepostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        draft.removepostDone = true;\n        draft.removepostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removepostLoading = false;\n        draft.removepostError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesDone = true;\n        draft.uploadImagesLoading = false;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        draft.retweetDone = true;\n        draft.retweetLoading = false;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        //   const postIndex = state.mainPosts.findIndex(\n        //     (v) => v.id === action.data.postId\n        //   );\n        //   const post = state.mainPosts[postIndex];\n        //   const Comments = [dummyComment(action.data.content), ...post.Comments];\n        //   const mainPosts = [...state.mainPosts];\n        //   mainPosts[postIndex] = { ...post, Comments };\n        //   return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentDone: true,\n        //     addCommentLoading: false,\n        //   };\n        // }\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        });\n        post.Comments.unshift(action.data);\n        draft.addCommentDone = true;\n        draft.addCommentLoading = false;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/huijungyoon/ReactFolder/NodeBirdJS/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","imagePaths","hasMorePosts","addpostLoading","addpostDone","addpostError","loadPostsLoading","loadPostsDone","loadPostsError","removepostLoading","removepostDone","removepostError","addCommenttLoading","addCommenttDone","addCommenttError","likePostLoading","likePostDone","likePostError","unLikePostLoading","unLikePostDone","unLikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","loadPostLoading","loadPostDone","loadPostError","singlePost","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","dummypost","id","content","User","nickname","Images","Comments","dummyComment","generate","reducer","state","action","draft","filter","v","i","unshift","error","post","find","PostId","Likers","push","UserId","likePosttLoading","likePosttDone","likePosttError","unLikePosttLoading","unLikePosttDone","unLikePosttError","concat","length","addCommentLoading","addCommentDone","addCommentError"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\n// import faker from \"faker\";\n// import shortid from \"shortid\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  addpostLoading: false,\n  addpostDone: false,\n  addpostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  removepostLoading: false,\n  removepostDone: false,\n  removepostError: null,\n  addCommenttLoading: false,\n  addCommenttDone: false,\n  addCommenttError: null,\n\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n\n  unLikePostLoading: false,\n  unLikePostDone: false,\n  unLikePostError: null,\n\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  singlePost: null,\n};\n\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortid.generate(),\n//       User: {\n//         id: shortid.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortid.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\n\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummypost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n});\n\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addpostLoading = true;\n        draft.addpostDone = false;\n        draft.addpostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addpostLoading = false;\n        draft.mainPosts.unshift(action.data);\n        draft.addpostDone = true;\n        draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addpostLoading = false;\n        draft.addpostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.singlePost = action.data;\n        draft.loadPostDone = true;\n\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers.push({ id: action.data.UserId });\n        draft.likePosttLoading = false;\n        draft.likePosttDone = true;\n        break;\n      }\n      case LIKE_POST_FAILURE:\n        draft.likePosttLoading = false;\n        draft.likePosttError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unLikePosttLoading = true;\n        draft.unLikePosttDone = false;\n        draft.unLikePosttError = null;\n        break;\n      case UNLIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n        draft.unLikePosttLoading = false;\n        draft.unLikePosttDone = true;\n        break;\n      }\n      case UNLIKE_POST_FAILURE:\n        draft.unLikePosttLoading = false;\n        draft.unLikePosttError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removepostLoading = true;\n        draft.removepostDone = false;\n        draft.removepostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(\n          (v) => v.id !== action.data.PostId\n        );\n        draft.removepostDone = true;\n        draft.removepostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removepostLoading = false;\n        draft.removepostError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesDone = true;\n        draft.uploadImagesLoading = false;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        draft.retweetDone = true;\n        draft.retweetLoading = false;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        //   const postIndex = state.mainPosts.findIndex(\n        //     (v) => v.id === action.data.postId\n        //   );\n        //   const post = state.mainPosts[postIndex];\n        //   const Comments = [dummyComment(action.data.content), ...post.Comments];\n        //   const mainPosts = [...state.mainPosts];\n        //   mainPosts[postIndex] = { ...post, Comments };\n        //   return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentDone: true,\n        //     addCommentLoading: false,\n        //   };\n        // }\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n\n        post.Comments.unshift(action.data);\n        draft.addCommentDone = true;\n        draft.addCommentLoading = false;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}